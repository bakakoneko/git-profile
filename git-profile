#!/usr/bin/env fish

set git_profile_version '1.1.0'

# Functions {{{
function usage
  man git-profile
end

function get_local_config
  set -g git_config_file (EDITOR=echo git config --local -e 2> /dev/null)
  return $status
end

function get_global_config
  set -g git_config_file (EDITOR=echo git config --global -e 2> /dev/null)
  return $status
end

function get_git_config
  get_local_config; or get_global_config
  return $status
end

function fatal
  printf $argv[1]"\n" $argv[2..] >&2
  exit 1
end

function set_config_dir
  if set -q XDG_CONFIG_DIR
    set -g config_dir "$XDG_CONFIG_DIR/git_profile"
  else
    set -g config_dir "$HOME/.config/git_profile"
  end
end

function set_profile_dir
  set_config_dir
  set -g profile_dir "$config_dir/profiles"
end

function list_profiles
  for f in "$profile_dir"/*
    echo (string replace "$profile_dir/" "" "$f")
  end
end

function require_arg
  if test (count $argv) -ne 1
    fatal "Expected 1 argument but got %d" (count $argv)
  else if test -z $argv[1]
    fatal "Profile cannot be an empty string"
  end
end

function save_profile
  set -l dst "$profile_dir/"$argv[1]
  cat "$git_config_file" > $dst
  echo 'Saved profile as "'$argv[1]'"'
end

function remove_profile
  set -l file "$profile_dir/"$argv[1]
  if test -e "$file"
    rm "$file"; or exit $status
    echo 'Removed profile "'$argv[1]'"'
  else
    echo 'Profile "'$argv[1]'" does not exist'
    exit 1
  end
end

function read_current_profile
  if test -e $argv[1]
    set -g current_profile (basename (realpath $argv[1])); or return $status
  else
    return 1
  end
end

function get_local_profile
  set -l root (git rev-parse --show-toplevel 2> /dev/null)
  or return $status
  echo "$root/.git/current_profile"
end

function get_global_profile
  echo "$config_dir/current_profile"
end

function write_config
  set -l config_marker "# Added by git-profile"
  string match "*$config_marker*" (cat "$git_config_file") > /dev/null
  set -l config_has_marker $status
  # FIXME: requires GNU coreutils version of realpath for --relative-to
  set -l relative_profile_path (realpath -s --relative-to=(dirname "$git_config_file") "$current_profile_path")
  if test ! -e "$current_profile_path" -a ! $config_has_marker -eq 0
    printf '%s\n[include]\n  path = %s\n' $config_marker $relative_profile_path >> "$git_config_file"
  end
end

function switch_profile
  set -l file "$profile_dir"/$argv[1]
  if test -e "$file"
    write_config
    ln -sf "$file" "$current_profile_path"; or fatal 'Failed to create profile link'
    return $status
  else
    echo 'Profile "'$argv[1]'" does not exist'
    exit 1
  end
end
# }}}

argparse 'h/help' 'v/version' 'd/dir=' 'l/list' 's/save' 'r/remove' 'global' 'local' -- $argv

if set -q _flag_help
  usage
  exit
end

if set -q _flag_version
  printf '%s %s\n' (basename (status -f)) $git_profile_version
  exit
end

if set -q _flag_global
  get_global_config; or fatal 'Failed to locate global Git configuration'
else
  get_local_config; or fatal 'Not in git directory'
end

if set -q GIT_PROFILE_DIR
  set profile_dir "$GIT_PROFILE_DIR"
else if set -q _flag_dir
  set profile_dir "$_flag_dir"
else
  set_profile_dir
end

mkdir -p "$profile_dir"; or fatal "Could not create profile directory"

if set -q _flag_list
  list_profiles
  exit
end

if set -q _flag_save
  require_arg $argv
  save_profile $argv[1]; or fatal 'Failed to save profile "%s"' $argv[1]
  exit
end

if set -q _flag_remove
  require_arg $argv
  remove_profile $argv[1]; or fatal 'Failed to remove profile "%s"' argv[1]
  exit
end

if set -q _flag_global
  set current_profile_path (get_global_profile)
else
  set current_profile_path (get_local_profile); or fatal 'Not in Git directory'
end

if test (count $argv) -eq 0
  read_current_profile "$current_profile_path"; or fatal 'Current profile is not set'
  echo $current_profile
  exit
end

switch_profile $argv[1]; or fatal 'Failed to switch to profile "%s"' argv[1]
